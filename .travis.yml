sudo: required
dist: xenial
before_install:
- export SW4STM32_VERSION=2.9

# eclipse needs java8
# make is needed by some projects with makefile
# bzip2 needed to unpack fr.ac6.mcu.externaltools.arm-none and gets uninstalled later
# actually bzip2 and unzip and zip may be needed
# adapted from: https://hub.docker.com/r/kamilcuk/docker-sw4stm32/dockerfile
- set -ex
- echo '===> Install prerequisites'
- sudo apt-get update
- sudo apt-get install -y --no-install-recommends openjdk-8-jre-headless make curl bzip2 sudo
- echo '===> Downloading sw4stm32'
- curl -k -O https://www.ac6-tools.com/downloads/SW4STM32/install_sw4stm32_linux_64bits-v${SW4STM32_VERSION}.run
- echo '===> Check md5sum'
- curl  -k  https://www.ac6-tools.com/downloads/SW4STM32/install_sw4stm32_linux_64bits-v${SW4STM32_VERSION}.run.md5 | md5sum -c -
- echo '===> Installing sw4stm32'
- yes | java -DINSTALL_PATH=/opt/sw4stm32 -jar install_sw4stm32_linux_64bits-v${SW4STM32_VERSION}.run -options-system
- rm -v install_sw4stm32_linux_64bits-v${SW4STM32_VERSION}.run
- echo '===> Create sw4stm32 shortcut'
- printf '#!/bin/sh\nexec /opt/sw4stm32/eclipse "$@"\n' > /usr/local/bin/sw4stm32
- chmod +x /usr/local/bin/sw4stm32
- echo '===> Create sw4stm32-headless-build.sh shortcut'
- printf '#!/bin/sh\nexec java -jar /opt/sw4stm32/plugins/org.eclipse.equinox.launcher_*.jar -nosplash -application org.eclipse.cdt.managedbuilder.core.headlessbuild "$@"\n' > /usr/local/bin/sw4stm32-headless-build.sh
- chmod +x /usr/local/bin/sw4stm32-headless-build.sh
- echo '===> Unpacking fr.ac6.mcu.externaltools.arm-none plugin'
- echo '===> ^ ^ Why sw4stm32 is too stupid to do this on its own ?!'
- cd /opt/sw4stm32/plugins/fr.ac6.mcu.externaltools.arm-none.linux64_*/tools
- mkdir -p compiler ; cd ./compiler
- tar xjvf ../st-gnu-arm-gcc-*.tar.bz2
- mv st-gnu-arm-gcc-*/* .
- rmdir st-gnu-arm-gcc-*
- echo '===> Finished unpacking arm-none-eabi-* for sw4stm32'
- echo '===> DONE'

script:
- sw4stm32 -noSplash -data /workspace/ -application org.eclipse.cdt.managedbuilder.core.headlessbuild -importAll ./ -build ".*/Debug" -cleanBuild all
- ls -la ./Debug/
