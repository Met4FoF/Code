# Python CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

executors:
  # Define a parameterized executor which accepts two parameters to choose the python
  # version which will be used for the docker image and the tox actions.
  tester:
    working_directory: ~/repo
    parameters:
      tag:
        type: string
        default: "3.10"
    docker:
      - image: cimg/python:<< parameters.tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
  # Define the executor for the Python semantic release.
  publisher:
    working_directory: ~/repo
    parameters:
      tag:
        type: string
        default: "3.10"
      pyenv:
        type: string
        default: "py310"
    docker:
      - image: cimg/python:<< parameters.tag >>
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    environment:
      PYENV: << parameters.pyenv >>
  gh_releaser:
    working_directory: ~/repo
    docker:
      - image: cimg/base:2021.04
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS

workflows:

  check_for_upgraded_deps:
    triggers:
      - schedule:
          cron: "0 0 1 * *"
          filters:
            branches:
              only: /main/
    jobs:
      - test_with_updated_deps:
          name: "test_with_updated_deps_py37"
          tag: "3.7"
          pyenv: "py37"
          context:
            - Docker publishing as bludoc
      - test_with_updated_deps:
          name: "test_with_updated_deps_py38"
          tag: "3.8"
          pyenv: "py38"
          context:
            - Docker publishing as bludoc
      - test_with_updated_deps:
          name: "test_with_updated_deps_py39"
          tag: "3.9"
          pyenv: "py39"
          context:
            - Docker publishing as bludoc
      - test_with_updated_deps:
          name: "test_with_updated_deps_py310"
          tag: "3.10"
          pyenv: "py310"
          context:
            - Docker publishing as bludoc
      - commit_push_open_pr:
          requires:
            - test_with_updated_deps_py37
            - test_with_updated_deps_py38
            - test_with_updated_deps_py39
            - test_with_updated_deps_py310
          context:
            - Docker publishing as bludoc
            - GitHub pushes to BjoernLudwigPTB's public_repos

  test_and_deploy:
    jobs:
      - test:
          name: "test_python3.7"
          tag: "3.7"
          pyenv: "py37"
          context:
            - Docker publishing as bludoc
      - test:
          name: "test_python3.8"
          tag: "3.8"
          pyenv: "py38"
          context:
            - Docker publishing as bludoc
      - test:
          name: "test_python3.9"
          tag: "3.9"
          pyenv: "py39"
          context:
            - Docker publishing as bludoc
      - test:
          name: "test_python3.10"
          tag: "3.10"
          pyenv: "py310"
          context:
            - Docker publishing as bludoc
      - preview_release:
          # Test the 'release' job to avoid trouble when Pull Requests get merged and
          # to preview publishing actions and the new changelog.
          requires:
            - test_python3.7
            - test_python3.8
            - test_python3.9
            - test_python3.10
          context:
            - Docker publishing as bludoc
      - confirm_previewed_release_actions:
          # This job allows for checking that the release we will create in the
          # next step actually is the desired release, by observing the result of
          # preview_release.
          type: approval
          requires:
            - preview_release
          filters:
            branches:
              # This assures the job only being triggered on branch main.
              only: /main/
      - release:
          # Job to potentially create a release based on python-semantic-release's
          # decision and publish it on GitHub and PyPI.org. This requires manual
          # approval in the previous step, which is only triggered on branch main,
          # thus this job here is triggered only on main as well.
          context:
            - pypi.org publishing for time-series-metadata
            - GitHub pushes to BjoernLudwigPTB's public_repos
            - Docker publishing as bludoc
          requires:
            - confirm_previewed_release_actions


commands:
  # Reusable command to prepare the environment for testing.
  create_folders_and_venv:
    description: "Prepare everything."
    parameters:
      pyenv:
        type: string
        default: "py310"
    steps:
    # Checkout code.
    - checkout
    # Create test-result folder.
    - run:
        name: Create test result folder
        command: |
          mkdir test-results

    # Create virtual environment.
    - run:
        name: Create virtual environment
        command: |
          python3 -m venv << parameters.pyenv >>
          source << parameters.pyenv >>/bin/activate
          pip install --upgrade pip==21.3.0 setuptools

  # Reusable command to install development dependencies.
  install__development_deps:
    description: "Install development dependencies."
    parameters:
      pyenv:
        type: string
        default: "py310"
    steps:

    # Install dependencies.
    - run:
        name: Install development dependencies
        command: |
          source << parameters.pyenv >>/bin/activate
          pip install -r requirements/dev-requirements-<< parameters.pyenv >>.txt

  # Reusable command to conduct actual testing.
  tox:
    description: "Perform tox testing."
    parameters:
      pyenv:
        type: string
    steps:

    # Perform tox testing.
    - run:
        name: Perform tox testing
        command: |
          source << parameters.pyenv >>/bin/activate
          tox -e << parameters.pyenv >> | tee --append test-results/pytest.log

  # Reusable command to store the previously generated test results.
  store_results:
    description: "Store test results and artifacts."
    steps:
    # Store test results.
    - store_artifacts:
        path: test-results
        destination: test-results

    - store_test_results:
        path: test-results

  check_for_new_deps_compilation:
    description: "Check for new deps' compilation."
    steps:
    - run:
        name: Abort if no new deps were compiled
        command: |
          git add .
          set +e
          git status | grep modified
          if [ $? -ne 0 ]; then
              set -e
              echo "No updated deps. Nothing to test and commit. We are all good."
              circleci-agent step halt
          fi

jobs:

  test_with_updated_deps:
    parameters:
      tag:
        type: string
        default: "3.10"
      pyenv:
        type: string
        default: "py310"
      posargs:
        type: string
        default: ""

    executor:
      name: tester
      tag: << parameters.tag >>

    steps:
      - create_folders_and_venv:
          pyenv: << parameters.pyenv >>
      - run:
          name: Recompile and sync deps
          command: |
            source << parameters.pyenv >>/bin/activate
            python -m pip install --upgrade tox pip-tools
            python -m piptools compile --upgrade \
              requirements/dev-requirements.in \
              --output-file requirements/dev-requirements-<< parameters.pyenv >>.txt
            python -m piptools sync \
              requirements/dev-requirements-<< parameters.pyenv >>.txt
      - check_for_new_deps_compilation
      - tox:
          pyenv: << parameters.pyenv >>

      - store_results

      - persist_to_workspace:
          root: .
          paths:
            - requirements/requirements-<< parameters.pyenv >>.txt
            - requirements/dev-requirements-<< parameters.pyenv >>.txt

  commit_push_open_pr:
    executor:
      name: gh_releaser

    steps:
      - checkout
      - attach_workspace:
          at: .
      - check_for_new_deps_compilation
      - run:
          name: Set new branch name to 'recompile_deps'
          command: echo 'export NEW_BRANCH=recompile_deps' >> $BASH_ENV
      - run:
          name: Create and checkout new branch if not already on and add changes
          command: |
            if [ ${NEW_BRANCH} != ${CIRCLE_BRANCH} ]; then
                git checkout -b ${NEW_BRANCH}
            fi
      - run:
          name: Commit and push changes
          command: |
            git config --global user.name "Bjoern Ludwig (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            git commit -am \
              "build(deps): recompile Python (dev) deps on $(date)"
            git push -fu origin  ${NEW_BRANCH}
      - run:
          name: Install GitHub CLI
          command: |
            curl -fsSL \
              https://cli.github.com/packages/githubcli-archive-keyring.gpg |\
              sudo dd of=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) \
              signed-by=/etc/apt/trusted.gpg.d/githubcli-archive-keyring.gpg]\
              https://cli.github.com/packages stable main" | \
              sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh
      - run:
          name: Check for an existing PR or create one
          command: |
            set +e
            gh pr list --head=$NEW_BRANCH | grep $NEW_BRANCH
            if [ $? -eq 1 ]; then
                set -e
                gh pr create --base=master --title "Update deps" \
                  --body "This PR provides recompiled deps for all outdated \
                  package versions. It was opened after the commited deps \
                  were succesfully compiled and all tests passed with the \
                  new versions. It should be merged as soon as possible to \
                  avoid any security issues due to outdated dependencies."
            else
                set -e
                echo "There already was a PR opened earlier. The 
                  current changes were force pushed into the existing branch."
            fi

  # Define one 'test' job with parameters to deal with all desired cases. The
  # reason for this is the desire to ensure the following for all supported Python
  # versions referring to the docs:
  #
  # - all tests are guaranteed to pass
  # - time-series-metadata with respect to its `setup.py` successfully installs
  test:
    # Define all parameters, where 'tag' is used for the docker image and 'pyenv' is
    # the string which is used in tox to identify the current Python version. We reuse
    # this variable basically everywhere we deal with the virtual environment.
    parameters:
      tag:
        type: string
        default: "3.8"
      pyenv:
        type: string
        default: "py38"

    # Specify the executor and hand over the docker image tag parameter.
    executor:
      name: tester
      tag: << parameters.tag >>

    # Specify the steps to execute during this test jobs.
    steps:
      - create_folders_and_venv:
          pyenv: << parameters.pyenv >>
      - install__development_deps:
          pyenv: << parameters.pyenv >>
      - tox:
          pyenv: << parameters.pyenv >>
      - store_results

  release:
    executor:
      name: publisher

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}

      # Publish it, if there is anything to publish!
      - run:
          name: Run semantic-release publish
          command: |
            source ${PYENV}/bin/activate
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            semantic-release publish

  preview_release:
    executor:
      name: publisher

    steps:
      - create_folders_and_venv:
          pyenv: ${PYENV}
      - install__development_deps:
          pyenv: ${PYENV}

      # Fake publish, just to make sure everything works after merging a PR and
      # before actual release jos run.
      - run:
          name: Preview python-semantic-release actions
          command: |
            unset CIRCLE_PULL_REQUEST CIRCLE_PULL_REQUESTS CI_PULL_REQUEST \
              CI_PULL_REQUESTS
            export CIRCLE_BRANCH=main
            source ${PYENV}/bin/activate
            git config --global user.name "semantic-release (via CircleCI)"
            git config --global user.email "bjoern.ludwig@ptb.de"
            echo "
            The changelog of the next release will contain:
            "
            semantic-release --unreleased changelog
            echo "
            -----------------------------------------------------------

            python-semantic-release would perform the following actions:
            "
            semantic-release --noop publish
